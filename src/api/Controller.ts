/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type AuctionInfoStruct = {
  startTime: BigNumberish;
  duration: BigNumberish;
  targetPoints: BigNumberish;
  pointsToSell: BigNumberish;
  startingPrice: BigNumberish;
  state: BigNumberish;
};

export type AuctionInfoStructOutput = [
  startTime: bigint,
  duration: bigint,
  targetPoints: bigint,
  pointsToSell: bigint,
  startingPrice: bigint,
  state: bigint
] & {
  startTime: bigint;
  duration: bigint;
  targetPoints: bigint;
  pointsToSell: bigint;
  startingPrice: bigint;
  state: bigint;
};

export interface ControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPointType"
      | "addRedeemable"
      | "bidTrackers"
      | "cancelAuction"
      | "claim"
      | "claimOpened"
      | "claimTo"
      | "createAuction"
      | "deposit"
      | "endAuction"
      | "eth"
      | "getAuctionInfo"
      | "getCurrentPoints"
      | "getLpToken"
      | "getMainToken"
      | "getSoldPoints"
      | "getTracker"
      | "initialize"
      | "lpt"
      | "openClaim"
      | "owner"
      | "placeBid"
      | "pointTypes"
      | "redeemables"
      | "renounceOwnership"
      | "toLpToken"
      | "toMainToken"
      | "totalPoints"
      | "trackedBalance"
      | "transferOwnership"
      | "updatePoints"
      | "version"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Charge"
      | "Deal"
      | "Deposit"
      | "Dividend"
      | "Initialized"
      | "OwnershipTransferred"
      | "Refund"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPointType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRedeemable",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bidTrackers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimOpened",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [BigNumberish[], AuctionInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAuctionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMainToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSoldPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTracker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lpt", values?: undefined): string;
  encodeFunctionData(functionFragment: "openClaim", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pointTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemables",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toLpToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toMainToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trackedBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoints",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPointType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidTrackers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOpened",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSoldPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTracker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pointTypes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toLpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toMainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trackedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ChargeEvent {
  export type InputTuple = [
    from: AddressLike,
    pt: BigNumberish,
    price: BigNumberish,
    points: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    pt: bigint,
    price: bigint,
    points: bigint
  ];
  export interface OutputObject {
    from: string;
    pt: bigint;
    price: bigint;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DealEvent {
  export type InputTuple = [
    bidder: AddressLike,
    pt: BigNumberish,
    price: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    bidder: string,
    pt: bigint,
    price: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    bidder: string;
    pt: bigint;
    price: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    from: AddressLike,
    lpt: BigNumberish,
    ez: BigNumberish
  ];
  export type OutputTuple = [from: string, lpt: bigint, ez: bigint];
  export interface OutputObject {
    from: string;
    lpt: bigint;
    ez: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DividendEvent {
  export type InputTuple = [amount: BigNumberish, current: BigNumberish];
  export type OutputTuple = [amount: bigint, current: bigint];
  export interface OutputObject {
    amount: bigint;
    current: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [
    to: AddressLike,
    pt: BigNumberish,
    price: BigNumberish,
    points: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    pt: bigint,
    price: bigint,
    points: bigint
  ];
  export interface OutputObject {
    to: string;
    pt: bigint;
    price: bigint;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    to: AddressLike,
    lpt: BigNumberish,
    ez: BigNumberish
  ];
  export type OutputTuple = [to: string, lpt: bigint, ez: bigint];
  export interface OutputObject {
    to: string;
    lpt: bigint;
    ez: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Controller extends BaseContract {
  connect(runner?: ContractRunner | null): Controller;
  waitForDeployment(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPointType: TypedContractMethod<[pt: BigNumberish], [void], "nonpayable">;

  addRedeemable: TypedContractMethod<
    [pt: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;

  bidTrackers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [AuctionInfoStructOutput, bigint, bigint] & {
        info: AuctionInfoStructOutput;
        currentPoints: bigint;
        soldPoints: bigint;
      }
    ],
    "view"
  >;

  cancelAuction: TypedContractMethod<
    [pointType: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[], [void], "nonpayable">;

  claimOpened: TypedContractMethod<[], [bigint], "view">;

  claimTo: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  createAuction: TypedContractMethod<
    [_pointType: BigNumberish[], _auctionInfo: AuctionInfoStruct[]],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [amountInEzEth: BigNumberish],
    [void],
    "nonpayable"
  >;

  endAuction: TypedContractMethod<
    [pointType: BigNumberish],
    [void],
    "nonpayable"
  >;

  eth: TypedContractMethod<[], [string], "view">;

  getAuctionInfo: TypedContractMethod<
    [pt: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        startTime: bigint;
        duration: bigint;
        targetPoints: bigint;
        startingPrice: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  getCurrentPoints: TypedContractMethod<[pt: BigNumberish], [bigint], "view">;

  getLpToken: TypedContractMethod<[], [string], "view">;

  getMainToken: TypedContractMethod<[], [string], "view">;

  getSoldPoints: TypedContractMethod<[pt: BigNumberish], [bigint], "view">;

  getTracker: TypedContractMethod<[pt: BigNumberish], [string], "view">;

  initialize: TypedContractMethod<[ezEth: AddressLike], [void], "nonpayable">;

  lpt: TypedContractMethod<[], [string], "view">;

  openClaim: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  placeBid: TypedContractMethod<
    [price: BigNumberish, points: BigNumberish, pointType: BigNumberish],
    [void],
    "nonpayable"
  >;

  pointTypes: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  redeemables: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[string, bigint] & { token: string; totalValue: bigint }],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  toLpToken: TypedContractMethod<[amountInEth: BigNumberish], [bigint], "view">;

  toMainToken: TypedContractMethod<
    [amountInLpt: BigNumberish],
    [bigint],
    "view"
  >;

  totalPoints: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  trackedBalance: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePoints: TypedContractMethod<
    [pointType: BigNumberish[], _currentPoints: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [amountInLPToken: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPointType"
  ): TypedContractMethod<[pt: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRedeemable"
  ): TypedContractMethod<
    [pt: BigNumberish, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bidTrackers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [AuctionInfoStructOutput, bigint, bigint] & {
        info: AuctionInfoStructOutput;
        currentPoints: bigint;
        soldPoints: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelAuction"
  ): TypedContractMethod<[pointType: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimOpened"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimTo"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createAuction"
  ): TypedContractMethod<
    [_pointType: BigNumberish[], _auctionInfo: AuctionInfoStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amountInEzEth: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endAuction"
  ): TypedContractMethod<[pointType: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAuctionInfo"
  ): TypedContractMethod<
    [pt: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        startTime: bigint;
        duration: bigint;
        targetPoints: bigint;
        startingPrice: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPoints"
  ): TypedContractMethod<[pt: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLpToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getMainToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSoldPoints"
  ): TypedContractMethod<[pt: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTracker"
  ): TypedContractMethod<[pt: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[ezEth: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "lpt"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "openClaim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBid"
  ): TypedContractMethod<
    [price: BigNumberish, points: BigNumberish, pointType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pointTypes"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeemables"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[string, bigint] & { token: string; totalValue: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toLpToken"
  ): TypedContractMethod<[amountInEth: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "toMainToken"
  ): TypedContractMethod<[amountInLpt: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPoints"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "trackedBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePoints"
  ): TypedContractMethod<
    [pointType: BigNumberish[], _currentPoints: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amountInLPToken: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Charge"
  ): TypedContractEvent<
    ChargeEvent.InputTuple,
    ChargeEvent.OutputTuple,
    ChargeEvent.OutputObject
  >;
  getEvent(
    key: "Deal"
  ): TypedContractEvent<
    DealEvent.InputTuple,
    DealEvent.OutputTuple,
    DealEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Dividend"
  ): TypedContractEvent<
    DividendEvent.InputTuple,
    DividendEvent.OutputTuple,
    DividendEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Charge(address,uint8,uint256,uint256)": TypedContractEvent<
      ChargeEvent.InputTuple,
      ChargeEvent.OutputTuple,
      ChargeEvent.OutputObject
    >;
    Charge: TypedContractEvent<
      ChargeEvent.InputTuple,
      ChargeEvent.OutputTuple,
      ChargeEvent.OutputObject
    >;

    "Deal(address,uint8,uint256,uint256)": TypedContractEvent<
      DealEvent.InputTuple,
      DealEvent.OutputTuple,
      DealEvent.OutputObject
    >;
    Deal: TypedContractEvent<
      DealEvent.InputTuple,
      DealEvent.OutputTuple,
      DealEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Dividend(uint256,uint256)": TypedContractEvent<
      DividendEvent.InputTuple,
      DividendEvent.OutputTuple,
      DividendEvent.OutputObject
    >;
    Dividend: TypedContractEvent<
      DividendEvent.InputTuple,
      DividendEvent.OutputTuple,
      DividendEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Refund(address,uint8,uint256,uint256)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
